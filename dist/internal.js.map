{"version":3,"file":"internal.js","sourceRoot":"","sources":["../src/internal.ts"],"names":[],"mappings":";;;;AACA,iCAAwC;AACxC,mCAAoE;AACpE,yCAA+E;AAC/E,mDAA2C;AAI3C,IAAM,sBAAsB,GAAG;IAC7B,WAAW,EAAE,UAAoB;IACjC,OAAO,EAAE,EAAsB;IAC/B,UAAU,EAAE,SAAmB;IAC/B,WAAW,EAAE,SAAmB;CACjC,CAAA;AAED,SAAS,YAAY,CAAI,OAAU,EAAE,KAAiB;IACpD,OAAO,sCAAK,OAAO,GAAK,KAAK,CAAO,CAAA;AACtC,CAAC;AAED,SAAsB,gBAAgB,CAAC,GAAU;;;;;wBAChC,qBAAM,GAAG,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,EAAA;;oBAAzD,MAAM,GAAG,SAAgD;oBAC/D,IAAI,2BAAS,EAAE;wBACb,sBAAO,IAAI,IAAI,CAAC,CAAC,MAAM,CAAC,EAAE;gCACxB,IAAI,EAAE,yEAAyE;6BAChF,CAAC,EAAA;qBACH;yBAAM;wBACL,sBAAO,IAAI,MAAM,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC,EAAA;qBAC1C;;;;;CACF;AATD,4CASC;AAED,SAAS,aAAa,CAAC,GAAW;IAChC,OAAO,2BAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;AAC/D,CAAC;AAED,SAAS,kBAAkB,CAAC,eAAgC;IAClD,IAAA,WAAW,GAAuC,eAAe,YAAtD,EAAE,OAAO,GAA8B,eAAe,QAA7C,EAAE,UAAU,GAAkB,eAAe,WAAjC,EAAE,WAAW,GAAK,eAAe,YAApB,CAAoB;IACzE,IAAM,cAAc,GAAG,YAAY,CAAC,0BAAc,EAAE,OAAO,CAAC,CAAA;IAC5D,IAAI,KAAK,GAAG,CAAC,CAAA;IACb,IAAI,MAAM,GAAG,CAAC,CAAA;IAEd,IAAI,WAAW,KAAK,WAAW,EAAE;QAC/B,MAAM,GAAG,UAAU,CAAA;QACnB,KAAK,GAAG,WAAW,CAAA;KACpB;SAAM;QACL,KAAK,GAAG,UAAU,CAAA;QAClB,MAAM,GAAG,WAAW,CAAA;KACrB;IACD,OAAO,4BAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE,cAAc,CAAC,CAAA;AACrE,CAAC;AAED,SAAgB,QAAQ,CAAC,GAAU,EAAE,UAAkB,EAAE,OAAiC;IACxF,IAAM,eAAe,GAAG,YAAY,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAA;IACrE,GAAG,CAAC,IAAI,CAAC,qBAAqB,EAAE,aAAa,CAAC,wBAAe,CAAC,EAAE;QAC9D,aAAa,EAAE,KAAK;KACrB,CAAC,CAAA;IACF,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,gBAAO,CAAC,EAAE,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAA;IACnF,OAAO,GAAG;SACP,MAAM,CAAC,MAAM,CAAC;SACd,IAAI,CAAC,cAAc,EAAE,kBAAkB,CAAC,eAAe,CAAC,EAAE;QACzD,aAAa,EAAE,KAAK;KACrB,CAAC;SACD,IAAI,CAAC,aAAa,EAAE,sBAAc,CAAC,UAAU,CAAC,EAAE;QAC/C,aAAa,EAAE,KAAK;KACrB,CAAC;SACD,MAAM,CAAC,OAAO,CAAC;SACf,IAAI,CAAC,mBAAmB,EAAE,aAAa,CAAC,wBAAe,CAAC,EAAE;QACzD,aAAa,EAAE,KAAK;KACrB,CAAC,CAAA;AACN,CAAC;AAlBD,4BAkBC","sourcesContent":["import JSZip = require('jszip')\r\nimport { getMHTdocument } from './utils'\r\nimport { contentTypesXml, documentXmlRels, relsXml } from './assets'\r\nimport { documentTemplate, Orient, Margins, defaultMargins } from './templates'\r\nimport { isBrowser } from 'browser-or-node'\r\n\r\nexport type DocumentOptions = typeof defaultDocumentOptions\r\n\r\nconst defaultDocumentOptions = {\r\n  orientation: 'portrait' as Orient,\r\n  margins: {} as Partial<Margins>,\r\n  paperWidth: 11905.511 as number,\r\n  paperHeight: 16837.795 as number\r\n}\r\n\r\nfunction mergeOptions<T>(options: T, patch: Partial<T>) {\r\n  return { ...options, ...patch } as T\r\n}\r\n\r\nexport async function generateDocument(zip: JSZip) {\r\n  const buffer = await zip.generateAsync({ type: 'arraybuffer' })\r\n  if (isBrowser) {\r\n    return new Blob([buffer], {\r\n      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n    })\r\n  } else {\r\n    return new Buffer(new Uint8Array(buffer))\r\n  }\r\n}\r\n\r\nfunction getBinaryData(str: string) {\r\n  return isBrowser ? new Blob([str]) : new Buffer(str, 'utf-8')\r\n}\r\n\r\nfunction renderDocumentFile(documentOptions: DocumentOptions) {\r\n  const { orientation, margins, paperWidth, paperHeight } = documentOptions\r\n  const marginsOptions = mergeOptions(defaultMargins, margins)\r\n  let width = 0\r\n  let height = 0\r\n  \r\n  if (orientation === 'landscape') {\r\n    height = paperWidth\r\n    width = paperHeight\r\n  } else {\r\n    width = paperWidth\r\n    height = paperHeight\r\n  }\r\n  return documentTemplate(width, height, orientation, marginsOptions)\r\n}\r\n\r\nexport function addFiles(zip: JSZip, htmlSource: string, options: Partial<DocumentOptions>) {\r\n  const documentOptions = mergeOptions(defaultDocumentOptions, options)\r\n  zip.file('[Content_Types].xml', getBinaryData(contentTypesXml), {\r\n    createFolders: false,\r\n  })\r\n  zip.folder('_rels').file('.rels', getBinaryData(relsXml), { createFolders: false })\r\n  return zip\r\n    .folder('word')\r\n    .file('document.xml', renderDocumentFile(documentOptions), {\r\n      createFolders: false,\r\n    })\r\n    .file('afchunk.mht', getMHTdocument(htmlSource), {\r\n      createFolders: false,\r\n    })\r\n    .folder('_rels')\r\n    .file('document.xml.rels', getBinaryData(documentXmlRels), {\r\n      createFolders: false,\r\n    })\r\n}\r\n"]}