{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":";;;AAAA,yCAAkE;AAElE,SAAgB,cAAc,CAAC,UAAkB;IAC/C,IAAM,GAAG,GAAG,kBAAkB,CAAC,UAAU,CAAC,CAAA;IAC1C,IAAM,uBAAuB,GAAG,GAAG,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAChE,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;IACjD,OAAO,+BAAmB,CAAC,UAAU,EAAE,uBAAuB,CAAC,CAAA;AACjE,CAAC;AALD,wCAKC;AAED,SAAS,kBAAkB,CAAC,UAAkB;IAC5C,IAAM,iBAAiB,GAAa,EAAE,CAAA;IACtC,IAAM,iBAAiB,GAAG,gCAAgC,CAAA;IAC1D,IAAM,eAAe,GAAG,UAAC,KAAa,EAAE,WAAmB,EAAE,eAAuB,EAAE,cAAsB;QAC1G,IAAM,KAAK,GAAG,iBAAiB,CAAC,MAAM,CAAA;QACtC,IAAM,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;QAC3C,IAAM,eAAe,GAAG,0BAAwB,KAAK,SAAI,SAAW,CAAA;QACpE,iBAAiB,CAAC,IAAI,CAAC,2BAAe,CAAC,WAAW,EAAE,eAAe,EAAE,eAAe,EAAE,cAAc,CAAC,CAAC,CAAA;QACtG,OAAO,OAAK,eAAe,OAAI,CAAA;IACjC,CAAC,CAAA;IACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;QAC7B,OAAO,EAAE,UAAU,YAAA,EAAE,iBAAiB,mBAAA,EAAE,CAAA;KACzC;IACD,UAAU,GAAG,UAAU,CAAC,OAAO,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAA;IACnE,OAAO,EAAE,UAAU,YAAA,EAAE,iBAAiB,mBAAA,EAAE,CAAA;AAC1C,CAAC","sourcesContent":["import { mhtDocumentTemplate, mhtPartTemplate } from './templates'\r\n\r\nexport function getMHTdocument(htmlSource: string) {\r\n  const ref = _prepareImageParts(htmlSource)\r\n  const imageContentPartsString = ref.imageContentParts.join('\\n')\r\n  htmlSource = ref.htmlSource.replace(/\\=/g, '=3D')\r\n  return mhtDocumentTemplate(htmlSource, imageContentPartsString)\r\n}\r\n\r\nfunction _prepareImageParts(htmlSource: string) {\r\n  const imageContentParts: string[] = []\r\n  const inlinedSrcPattern = /\"data:(\\w+\\/\\w+);(\\w+),(\\S+)\"/g\r\n  const inlinedReplacer = (match: string, contentType: string, contentEncoding: string, encodedContent: string) => {\r\n    const index = imageContentParts.length\r\n    const extension = contentType.split('/')[1]\r\n    const contentLocation = `file:///C:/fake/image${index}.${extension}`\r\n    imageContentParts.push(mhtPartTemplate(contentType, contentEncoding, contentLocation, encodedContent))\r\n    return `\\\"${contentLocation}\\\"`\r\n  }\r\n  if (!/<img/g.test(htmlSource)) {\r\n    return { htmlSource, imageContentParts }\r\n  }\r\n  htmlSource = htmlSource.replace(inlinedSrcPattern, inlinedReplacer)\r\n  return { htmlSource, imageContentParts }\r\n}\r\n"]}